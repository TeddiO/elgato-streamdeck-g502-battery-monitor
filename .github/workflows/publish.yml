name: Build & Publish

on:
    pull_request:
#   push:
#     branches:
#       - main

permissions:
  contents: write
  pull-requests: read

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prevent recursion
        run: |
          if git log -1 --pretty=%B | grep -q '\[skip ci\]'; then
            exit 0
          fi

      - name: Get PR number
        id: get_pr
        run: |
          PR_NUM=$(curl -s \
            -H "Accept: application/vnd.github.groot-preview+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/pulls" \
            | jq -r '.[0].number // empty')
          echo "PR_NUM=$PR_NUM" >> $GITHUB_ENV

      - name: Skip if not a PR merge
        if: env.PR_NUM == ''
        run: exit 0

      - name: Get PR details
        id: pr_details
        run: |
          PR_INFO=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUM}")
          AUTHOR=$(echo "$PR_INFO" | jq -r .user.login)
          LABELS=$(echo "$PR_INFO" | jq -r '.labels[].name')
          echo "AUTHOR=$AUTHOR" >> $GITHUB_ENV
          echo "LABELS<<EOF" >> $GITHUB_ENV
          echo "$LABELS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Determine bump type
        id: determine_bump
        run: |
          if [[ "$AUTHOR" == "dependabot[bot]" ]]; then
            TYPE=revision
          else
            TYPE=
            for lbl in $LABELS; do
              case "$lbl" in
              major) TYPE=major ;;
              minor) TYPE=minor ;;
              patch) TYPE=patch ;;
              revision) TYPE=revision ;;
              esac
            done
          fi
          if [ -z "$TYPE" ]; then
            echo "No version-bump label on PR #$PR_NUM" >&2
            exit 1
          fi
          echo "TYPE=$TYPE" >> $GITHUB_ENV

      - name: Calculate new semver-4 version
        id: calc_version
        run: |
          RESPONSE=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          LATEST_TAG=$(echo "$RESPONSE" | jq -r .tag_name)
          CURRENT=${LATEST_TAG#v}
          IFS='.' read -r MAJ MIN PAT REV <<< "$CURRENT"
          case "$TYPE" in
          major)    MAJ=$((MAJ+1)); MIN=0; PAT=0; REV=0 ;;
          minor)    MIN=$((MIN+1)); PAT=0; REV=0 ;;
          patch)    PAT=$((PAT+1)); REV=0 ;;
          revision) REV=$((REV+1)) ;;
          esac
          NEW="$MAJ.$MIN.$PAT.$REV"
          echo "CURRENT=$CURRENT" >> $GITHUB_ENV
          echo "NEW=$NEW"     >> $GITHUB_ENV
          echo "Calculated new version: $NEW"

      - name: Generate manifest.json from template
        run: |
          sed "s/__VERSION__/${{ env.NEW }}/" \
            com.teddi.g502-battery-monitor.sdPlugin/manifest.json.tpl \
            > com.teddi.g502-battery-monitor.sdPlugin/manifest.json

      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: true

      - name: Build App
        run: pnpm build

      - name: Zip artifact
        run: |
          zip -r com.teddi.g502-battery-monitor.sdPlugin.zip \
            com.teddi.g502-battery-monitor.sdPlugin

    #   - name: Publish release
    #     uses: softprops/action-gh-release@v2
    #     with:
    #       files: com.teddi.g502-battery-monitor.sdPlugin.zip
    #       token: ${{ secrets.GITHUB_TOKEN }}
    #       name: v${{ env.NEW }}
    #       tag_name: v${{ env.NEW }}
    #       body: "Release v${{ env.NEW }}"
    #       draft: false
    #       prerelease: false
    #       make_latest: true
    #       generate_release_notes: true
