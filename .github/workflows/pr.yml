name: Build (PR)

on:
  pull_request:
    types:
      - opened
      - synchronize
      - labeled

permissions:
  contents: write
  pull-requests: write

jobs:
  build-app:
    if: github.event.action != 'labeled' || contains(fromJSON('["major", "minor", "patch", "revision"]'), github.event.label.name)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - id: detect
        run: |
          TYPE=
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            TYPE=revision
          fi
          for lbl in $(jq -r '.pull_request.labels[].name' "$GITHUB_EVENT_PATH"); do
            case "$lbl" in
            major) TYPE=major ;;
            minor) TYPE=minor ;;
            patch) TYPE=patch ;;
            revision) TYPE=revision ;;
            esac
          done
          echo "TYPE=$TYPE" >> $GITHUB_ENV
          echo "Determined bump type: $TYPE"

      - if: env.TYPE
        id: calc
        run: |
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          LATEST_TAG=$(echo "$RESPONSE" | jq -r .tag_name)
          CURRENT=${LATEST_TAG#v}
          IFS='.' read -r MAJ MIN PAT REV <<< "$CURRENT"
          case "$TYPE" in
          major) MAJ=$((MAJ+1)); MIN=0; PAT=0; REV=0 ;;
          minor) MIN=$((MIN+1)); PAT=0; REV=0 ;;
          patch) PAT=$((PAT+1)); REV=0 ;;
          revision) REV=$((REV+1)) ;;
          esac
          NEW="$MAJ.$MIN.$PAT.$REV"
          echo "Fetched latest release: $LATEST_TAG"
          echo "Current version: $CURRENT"
          echo "Proposed new version: $NEW"
          echo "CURRENT=$CURRENT" >> $GITHUB_ENV
          echo "NEW=$NEW" >> $GITHUB_ENV

      - if: env.TYPE
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body: `Current version: ${process.env.CURRENT}
              Proposed bump (${process.env.TYPE}): ${process.env.NEW}`
            });

      - if: env.TYPE
        name: Generate manifest.json from template
        run: |
          sed "s/__VERSION__/${{ env.NEW }}/" \
            com.teddi.g502-battery-monitor.sdPlugin/manifest.json.tpl \
            > com.teddi.g502-battery-monitor.sdPlugin/manifest.json
          echo "Generated manifest.json:"
          cat com.teddi.g502-battery-monitor.sdPlugin/manifest.json

      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: true

      - run: pnpm build
