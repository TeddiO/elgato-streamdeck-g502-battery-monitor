name: Build (PR)

on:
  pull_request:

permissions:
  contents: write

jobs:
  build-app:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: detect
        run: |
          TYPE=
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            TYPE=revision
          fi
          for lbl in $(jq -r '.pull_request.labels[].name' "$GITHUB_EVENT_PATH"); do
            case "$lbl" in
            major) TYPE=major ;;
            minor) TYPE=minor ;;
            revision) TYPE=revision ;;
            version) TYPE=patch ;;
            esac
          done
          echo "TYPE=$TYPE" >> $GITHUB_ENV

      - if: env.TYPE
        id: calc
        run: |
          CUR=$(jq -r .version package.json)
          IFS='.' read -r MAJ MIN PAT REV <<< "$CUR"
          case "$TYPE" in
          major)
            MAJ=$((MAJ+1)); MIN=0; PAT=0; REV=0 ;;
          minor)
            MIN=$((MIN+1)); PAT=0; REV=0 ;;
          patch)
            PAT=$((PAT+1)); REV=0 ;;
          revision)
            REV=$((REV+1)) ;;
          esac
          NEW="$MAJ.$MIN.$PAT.$REV"
          echo "CURRENT=$CUR" >> $GITHUB_ENV
          echo "NEW=$NEW" >> $GITHUB_ENV

      - if: env.TYPE
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body: `Current version: ${process.env.CURRENT}\nProposed bump (${process.env.TYPE}): ${process.env.NEW}`
            });

      - name: Check release doesn't exist
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q 'package.json'; then
            PREV_DEV=$(git show HEAD~1:package.json | jq -S '.devDependencies')
            CURR_DEV=$(jq -S '.devDependencies' package.json)
            PREV_OTH=$(git show HEAD~1:package.json | jq -S 'del(.devDependencies)')
            CURR_OTH=$(jq -S 'del(.devDependencies)' package.json)
            if [ "$PREV_DEV" = "$CURR_DEV" ] && [ "$PREV_OTH" = "$CURR_OTH" ]; then
              echo "Only devDependencies changed; skipping release check."
              exit 0
            fi
          fi
          VERSION=$(jq -r '.Version' com.teddi.g502-battery-monitor.sdPlugin/manifest.json)
          echo "Checking for existing release tag v$VERSION..."
          RESPONSE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION")
          if [ "$(echo "$RESPONSE" | jq -r .message)" != "Not Found" ]; then
            echo "Release v$VERSION already exists; please bump the version in manifest.json."
            exit 1
          fi
          echo "Release tag v$VERSION not found; proceeding."
          echo "VERSION=v$VERSION" >> $GITHUB_ENV

      - uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: true

      - run: pnpm build
