name: Build (PR)
on:
  pull_request:
permissions:
  contents: write

jobs:
  build-app:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: detect
        run: |
          TYPE=
          bypass=false
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            TYPE=revision
            bypass=true
          fi
          for lbl in $(jq -r '.pull_request.labels[].name' "$GITHUB_EVENT_PATH"); do
            case "$lbl" in
              major)    TYPE=major;    bypass=true ;;
              minor)    TYPE=minor;    bypass=true ;;
              version)  TYPE=revision; bypass=true ;;
              revision) TYPE=revision; bypass=true ;;
            esac
          done
          echo "TYPE=$TYPE" >> $GITHUB_ENV
          echo "bypass=$bypass" >> $GITHUB_ENV

      - if: env.TYPE
        id: calc
        run: |
          if [[ "$TYPE" == "revision" ]]; then
            NPM_BUMP=patch
          else
            NPM_BUMP=$TYPE
          fi
          JSON=$(npm version $NPM_BUMP --no-git-tag-version --json)
          echo "CURRENT=$(echo $JSON | jq -r .oldVersion)" >> $GITHUB_ENV
          echo "NEW=$(echo $JSON | jq -r .version)" >> $GITHUB_ENV

      - if: env.TYPE
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body: `Current version: ${process.env.CURRENT}\nProposed bump (${process.env.TYPE}): ${process.env.NEW}`
            })

      - if: env.bypass != 'true'
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q 'package.json'; then
            PREV_DEV=$(git show HEAD~1:package.json | jq -S '.devDependencies')
            CURR_DEV=$(jq -S '.devDependencies' package.json)
            PREV_OTH=$(git show HEAD~1:package.json | jq -S 'del(.devDependencies)')
            CURR_OTH=$(jq -S 'del(.devDependencies)' package.json)
            if [ "$PREV_DEV" = "$CURR_DEV" ] && [ "$PREV_OTH" = "$CURR_OTH" ]; then
              exit 0
            fi
          fi
          VERSION=$(jq -r '.Version' com.teddi.g502-battery-monitor.sdPlugin/manifest.json)
          RESPONSE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION")
          if [ "$(echo "$RESPONSE" | jq -r .message)" != "Not Found" ]; then
            exit 1
          fi
          echo "VERSION=v$VERSION" >> $GITHUB_ENV

      - uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: true

      - run: pnpm build
